start js_lib
walker@!!: open
function walker(inp){
	var x = inp[0];
	var y = inp[1];
	var dstX = inp[0];
	var dstY = inp[1];
	var deltaX = 0.001;
	var deltaY = 0.001;
	var dirX = 1;
	var dirY = 1;
	speed = inp[2];
	this.next = function(){
		function inRegion(borderA, borderB, point) {
			var res = false;
			if (borderA < point && point < borderB) {
				res = true;
			};
			return res;
		};

		function setCoord(coord, coordDest, coordDir, coordSpeed) {

			var res = 0;
			if (coord == coordDest){
				res = coord;
			} else {
				var cur = coord + coordDir*Math.round(coordSpeed);
				if (inRegion(coord, cur, coordDest) || inRegion(cur, coord, coordDest))	{
					res = coordDest;
				} else {
					res = cur;
				};
			};
			return res;
		};

		var x = setCoord(x, dstX, dirX, deltaX);
		var y = setCoord(y, dstY, dirY, deltaY);
		return [x, y]
	}
	this.setDst = function(ix, iy){
		dstX = ix;
		dstY = iy;
		// if destination < current position then reverse diriction
		if (dstX > x) {
			dirX = 1;
		} else {
			dirX = -1;
		};

		if (dstY > y){
			dirY = 1;
		} else {
			dirY = -1;
		};
		//inc step = speed
		var dx = Math.abs(dstX-x)/speed;
		var dy = Math.abs(dstY-y)/speed;

		if (dx > dy){
			deltaX = speed;
			deltaY = dy*speed/dx;
		} else {
			deltaY = speed;
			deltaX = dx/(dy/speed);
		};
	}
	this.getPic = function(){
		img = 'yellowSmile01.png';
		return img;
	};
	this.getXY = function(){
		return [x, y];
	};
}
walker@!!: close
fon@!!: open
function fon(){
	var x = 0;
	var y = 0;
	this.getXY = function(){
		return [x, y];
	};
	this.getPic = function(){
		img = 'fon02.png';
		return img;
	};
}
fon@!!: close
end js_lib
